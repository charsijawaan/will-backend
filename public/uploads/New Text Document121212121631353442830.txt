var {personalDetails, wivesDetails, executorDetails, childrenDetails, guardianDetails,
          distributionDetails, remainderDetails, otherDetails, petDetails, burialDetails,additionalDetails,
          signingDetails, userID} = req.body;


    let filePaths = [];
    let urls = []

    let image=''
    if(req.method==='POST') {

      try {
        if(req.files) {
            filePaths = await uploadFiles(req);
            console.log(filePaths);
            for(let i = 0; i < filePaths.length; i++) {
              image = await cloudinary.uploader.upload(filePaths[i]);
              urls.push(image.url);
              fs.unlinkSync(filePaths[i]);
            }
        }

    const p = JSON.parse(personalDetails)
    const w = JSON.parse(wivesDetails)
    const exe = JSON.parse(executorDetails)
    const c = JSON.parse(childrenDetails)
    const g = JSON.parse(guardianDetails)
    const d = JSON.parse(distributionDetails)
    const r = JSON.parse(remainderDetails)
    const o = JSON.parse(otherDetails)
    const pet = JSON.parse(petDetails)
    const b = JSON.parse(burialDetails)
    const a = JSON.parse(additionalDetails)
    const s = JSON.parse(signingDetails)
    //
    //
      const newProduct = new Will({
        _id: new mongoose.Types.ObjectId(),
        type: "Standard",
        personalDetails: p,
        wivesDetails: w,
        executorDetails: exe,
        childrenDetails: c,
        guardianDetails:g,
        distributionDetails:d,
        remainderDetails:r,
        otherDetails:o,
        petDetails: pet,
        burialDetails:b,
        additionalDetails:a,
        signingDetails:s,
        selfies: urls,
        userID: userID,
        dateCreated: moment().format('LL'),
      })
       await newProduct.save();

       await Users.findOneAndUpdate({ _id: userID }, { activeWillID: newProduct._id });
    //
     }
     catch (error) {
      console.log(error)
     }
    res.status(200).json({
      message: 'images uploaded successfully',
      data: urls
    })

  }
  else{
    res.status(405).json({
      err: `${req.method} method not allowed`
    })
  }